#!/usr/bin/env python3
import os
import cv2
import rospy
import operator
import numpy as np

from sensor_msgs import point_cloud2
from std_msgs.msg import Header, String
import jsk_recognition_msgs.msg as jsk_msgs
import darknet_ros_msgs.msg as darknet_msgs
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image, PointCloud2, PointField

from frustum_pointnet.kitti import kitti_util as utils
from frustum_pointnet.models.frustum_pointnets import g_type2class
from frustum_pointnet.kitti.kitti_object import get_lidar_in_image_fov, kitti_object

pub_class = ['Car', 'Pedestrian', 'Cyclist']

DATASET_ROOT = "/hdd/Thesis/SiameseTracker/dataset/KITTI/training"
IMG_TAG = "image_02"
SEQ = "0000"
PC_TAG = "velodyne"
IMG_SEQUENCE = os.path.join(IMG_TAG, SEQ)
PC_SEQUENCE = os.path.join(PC_TAG, SEQ)
SEQ_CALIB_PATH = os.path.join(DATASET_ROOT, "calib", "0000.txt")
IMAGE_DATASET_PATH = os.path.join(DATASET_ROOT, IMG_SEQUENCE)
PC_DATASET_PATH = os.path.join(DATASET_ROOT, PC_SEQUENCE)
LABELS_PATH = os.path.join(DATASET_ROOT, "label_02", SEQ + ".txt")
PUB_RATE = 5


class KittiPublisher:
    def __init__(self) -> None:
        # Initialize all the paths
        self.dataset_root = DATASET_ROOT
        self.img_seq = IMG_SEQUENCE
        self.pc_seq = PC_SEQUENCE
        self.img_dataset_path = IMAGE_DATASET_PATH
        self.pc_dataset_path = PC_DATASET_PATH
        self.labels_path = LABELS_PATH

        rospy.init_node('kitti_publisher', anonymous=True)

        # CvBridge for OpenCV-ROS image transport
        self.bridge = CvBridge()

        # Messages that will be published by the node:

        # - RGB images
        self.img_pub = rospy.Publisher(
            'image_publisher', Image, queue_size=1)

        # - Velodyne pointcloud
        self.pc_pub = rospy.Publisher(
            'pointcloud_publisher', PointCloud2, queue_size=1)

        # - Pointcloud frustrum from image size
        self.depth_pub = rospy.Publisher(
            'depth_publisher', PointCloud2, queue_size=1)

        # - 3D Annotated bounding boxes
        self.gt_bb_pub_3D = rospy.Publisher(
            'gt_bb_publisher_3D', jsk_msgs.BoundingBoxArray, queue_size=1)

        # - 2D Annotated bounding boxes
        self.gt_bb_pub_2D = rospy.Publisher(
            'gt_bb_publisher_2D', darknet_msgs.BoundingBoxes, queue_size=1)

        # Get all dataset paths
        self.images = sorted(os.listdir(self.img_dataset_path))
        self.pointclouds = sorted(os.listdir(self.pc_dataset_path))
        self.labels = sorted(utils.read_label(
            self.labels_path), key=operator.attrgetter('frame_num'))

        # Initialize calib from calibration file
        self.calib = utils.Calibration(SEQ_CALIB_PATH)

        self.rate = rospy.Rate(PUB_RATE)

        self.curr_frame = 0

    def get_calibration(self, idx):
        '''Get calibration file '''
        assert(idx < self.num_samples)
        calib_filename = os.path.join(self.calib_dir, '%06d.txt' % (idx))
        return utils.Calibration(calib_filename)

    def pub_img(self, image_name, timestamp):
        '''Publish image as ros msg'''
        image = cv2.imread(image_name)
        h, w, c = image.shape
        image_msg = self.bridge.cv2_to_imgmsg(image, 'bgr8')
        image_msg.header.stamp = timestamp
        self.img_pub.publish(image_msg)

        return image

    def array2pc(self, points):
        '''Convert numpy array in ros PointCloud2 msg'''
        fields = [PointField('x', 0, PointField.FLOAT32, 1),
                  PointField('y', 4, PointField.FLOAT32, 1),
                  PointField('z', 8, PointField.FLOAT32, 1),
                  PointField('intensity', 12, PointField.FLOAT32, 1)]

        header = Header()
        header.frame_id = "base_link"
        header.stamp = rospy.Time.now()

        return point_cloud2.create_cloud(header, fields, points)

    def pub_pc(self, pc, timestamp):
        '''Publish pointcloud'''
        points = np.fromfile(pc, dtype=np.float32).reshape(-1, 4)
        pc_msg = self.array2pc(points)
        pc_msg.header.stamp = timestamp
        self.pc_pub.publish(pc_msg)

        return points

    def pub_depth(self, image, pointcloud, timestamp):
        '''Publish lidar points in FOV'''
        h, w, _ = image.shape
        _, _, fov_inds = get_lidar_in_image_fov(
            pointcloud[:, :3], self.calib, 0, 0, w, h, return_more=True)
        lidar_window = pointcloud[fov_inds, :]
        lidar_window_msg = self.array2pc(lidar_window)
        lidar_window_msg.header.stamp = timestamp

        self.depth_pub.publish(lidar_window_msg)

        return lidar_window

    def pub_gt_bbox(self, timestamp):
        '''Publish target object bounding boxes'''

        objects = self.labels

        i = self.curr_frame

        gt_bbox_array_3D = []
        bbox_array_3D = jsk_msgs.BoundingBoxArray()
        bbox_array_3D.header = Header()
        bbox_array_3D.header.stamp = timestamp
        bbox_array_3D.header.frame_id = "base_link"

        gt_bbox_array_2D = []
        bbox_array_2D = darknet_msgs.BoundingBoxes()
        bbox_array_2D.header = Header()
        bbox_array_2D.header.stamp = timestamp
        bbox_array_2D.header.frame_id = "base_link"

        while i < len(objects):
            if objects[i].frame_num == self.curr_frame and objects[i].type != 'DontCare':

                # 3D Bounding box
                obj = objects[i]
                bbox_3D = jsk_msgs.BoundingBox()
                bbox_3D.header.frame_id = "base_link"
                bbox_3D.dimensions.x = obj.w
                bbox_3D.dimensions.y = obj.l
                bbox_3D.dimensions.z = obj.h
                bbox_3D.pose.position.x = obj.t[2]
                bbox_3D.pose.position.y = -obj.t[0]
                bbox_3D.pose.position.z = -obj.t[1]/2

                roll, pitch, yaw = 0, 0, -obj.ry
                qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - \
                    np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
                qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + \
                    np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
                qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - \
                    np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
                qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + \
                    np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)

                bbox_3D.pose.orientation.x = qx
                bbox_3D.pose.orientation.y = qy
                bbox_3D.pose.orientation.z = qz
                bbox_3D.pose.orientation.w = qw

                # bbox_3D.label = g_type2class[obj.type]
#                 bbox_3D.value = obj.class_id

                gt_bbox_array_3D.append(bbox_3D)

                # 2D Bounding box
                bbox_2D = darknet_msgs.BoundingBox()

                # w = obj.xmax - obj.xmin
                # h = obj.ymax - obj.ymin
                # bbox_2D.center.x = obj.xmin + w // 2
                # bbox_2D.center.y = obj.ymin + h // 2
                # bbox_2D.center.theta = 0
                # bbox_2D.size_x = w
                # bbox_2D.size_y = h
                # bbox_2D.type = obj.type


                # Only publish useful ones
                if obj.type in pub_class:
                    bbox_2D.xmin = int(obj.xmin)
                    bbox_2D.ymin = int(obj.ymin)
                    bbox_2D.xmax = int(obj.xmax)
                    bbox_2D.ymax = int(obj.ymax)
                    bbox_2D.Class = obj.type
                    bbox_2D.id = g_type2class[obj.type]
                    bbox_2D.probability = 1.0
                    gt_bbox_array_2D.append(bbox_2D)

            elif objects[i].frame_num > self.curr_frame:
                break

            i += 1

        bbox_array_3D.boxes = gt_bbox_array_3D
        bbox_array_2D.bounding_boxes = gt_bbox_array_2D

        self.gt_bb_pub_3D.publish(bbox_array_3D)
        self.gt_bb_pub_2D.publish(bbox_array_2D)

    def pub_loop(self):
        '''Main node loop for topic publishing'''
        for image, pc in zip(self.images, self.pointclouds):
            if rospy.is_shutdown():
                break

            image_name = os.path.join(IMAGE_DATASET_PATH, image)
            pc_name = os.path.join(PC_DATASET_PATH, pc)

            timestamp = rospy.Time.now()
            image = self.pub_img(image_name, timestamp)
            pointcloud = self.pub_pc(pc_name, timestamp)
            self.pub_depth(image, pointcloud, timestamp)
            self.pub_gt_bbox(timestamp)

            self.curr_frame += 1
            self.rate.sleep()


if __name__ == '__main__':
    print("Starting image publisher node...")

    pub = KittiPublisher()
    try:
        pub.pub_loop()
    except rospy.ROSInterruptException:
        pass
